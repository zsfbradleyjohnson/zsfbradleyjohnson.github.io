---
layout: post
title:  "多线程"
date:   2015-08-01 20:14:33
categories: iOS
comments: true
---
> &nbsp;&nbsp;&nbsp;&nbsp;具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。 在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理（Multithreading）”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。

<br><br>
#### 1.多线程在iOS上的实现途径
&nbsp;&nbsp;&nbsp;&nbsp;在iOS上，我们常见的多线程有三种： `NSThread`、 `NSOperation`、 `GCD`。他们常见的优缺点分别如下：
<br>
<br>
`NSThread`: 更为轻量级。但是需要自己管理线程的生命周期，线程同步。线程同步对数据的加锁会有一定的系统开销。
<br><br>
`NSOperation`: 不需要关心线程管理，数据同步的事情，可以把精力放在自己需要执行的操作上。但是它是抽象类，使用它必须用它的子类，可以实现它或者使用它定义好的两个子类：`NSInvocationOperation` 和 `NSBlockOperation`。
<br><br>
`GCD`: 它会自动管理线程的生命周期（创建线程、调度任务、销毁线程），完全不需要我们管理，我们只需要告诉干什么就行。而且它使用了较多的Block，更加的灵活方便。但是它是基于C语言封装的，所以在可读性和理解性上没有那么便捷。

<br>
其实还有一种 `Pthreads` 的多线程技术，它是在类Unix操作系统（Unix、Linux、Mac OS X等）中，都使用Pthreads作为操作系统的线程。简单地说，这是一套在很多操作系统上都通用的多线程API，移植性很强，当然在 iOS 中也是可以的。
<br>
也因为它在iOS上的使用几乎为零，所以我们也就忽略它不谈，这里作为了解一下知道即可。

<br>

#### 2.多线程使用- `NSThread`
&nbsp;&nbsp;&nbsp;&nbsp;`NSThread`这套方案是经过苹果封装后的，并且完全面向对象的。你可以直接操控线程对象，十分的直观和方便。但是，它的生命周期还是需要我们手动管理，所以这套方案不太常用。但是其中的某些方法例如 `[NSThread currentThread]`，它可以获取当前线程类，你就可以知道当前线程的各种属性，用于调试十分方便。下面我们来具体写一写代码:<br>

&nbsp;&nbsp;&nbsp;&nbsp;在创建上，我们一共有3种方式。

1.

	#import "NSThreadViewController.h"
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	// 线程创建，执行 Target 的 selector 方法，并传入 object 参数
    	NSThread * thread = [[NSThread alloc] initWithTarget:self selector:@selector(waitForRun:) object:params];
    	
    	// 声明线程优先级
    	thread.threadPriority = 1.0;
    	// 为线程命名，便于区分
    	thread.name = @"ThreadTwo";
    	// 启动线程
    	[thread start];
	}
	@end

2.

	#import "NSThreadViewController.h"
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	
    	// 线程创建后立刻执行，执行 Target 的 selector 方法，并传入 object 参数
    	[NSThread detachNewThreadSelector:self toTarget:@selector(waitForRun:) withObject:params];
	}
	@end

3.

	#import "NSThreadViewController.h"
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	
    	// 线程隐式创建后立刻执行，执行 self 的 selector 方法，并传入 object 参数
    	[self performSelector:@selector(waitForRun:) withObject:params];

	}
	@end

而我们在线程之间，总是要进行通讯，常用的几种通讯方法有:<br>
`- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait;`
`- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(nullable id)arg waitUntilDone:(BOOL)wait NS_AVAILABLE(10_5, 2_0);`

<br>

下面，我们用`NSThread`写一个经典的异步线程下载图片数据，再回到主线程刷新UI的小Demo：

	#import "NSThreadViewController.h"
	
	#define ImgUrl @"http://oaldigvho.bkt.clouddn.com/bradleyJohnson.jpg"
	
	@interface NSThreadViewController ()

	@property (nonatomic , strong) UIImageView * imgView;

	@end
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	
    	self.imgView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 100, self.view.bounds.size.width, self.view.bounds.size.height-200)];
    	self.imgView.backgroundColor = [UIColor lightGrayColor];
    	[self.view addSubview:self.imgView];
    
    	NSThread * thread = [[NSThread alloc] initWithTarget:self selector:@selector(downLoadImageData:) object:ImgUrl];
    	thread.name = @"downloadData";
    	[thread start];
    	
    	NSLog(@"Main thread : %@",[NSThread currentThread]);
	}

	-(void)downLoadImageData:(NSString *)url
	{
    	NSData * data = [NSData dataWithContentsOfURL:[NSURL URLWithString:url]];
    
    	if (data) {
    		
        	NSLog(@"Ready for data thread : %@",[NSThread currentThread]);
        	// 休眠两秒
        	[NSThread sleepForTimeInterval:2];
        	
        	// 跳回主线程刷新 UI （线程间通讯就发生在这里）
        	[self performSelectorOnMainThread:@selector(reloadUI:) withObject:data waitUntilDone:NO];
    	}
	}

	-(void)reloadUI:(NSData *)data
	{
		NSLog(@"Reload UI thread : %@",[NSThread currentThread]);
		    
    	self.imgView.image = [UIImage imageWithData:data];
	}
	
	@end

效果如图：
<br><br>
![下载图片](http://oaldigvho.bkt.clouddn.com/2.1-g.gif)

<br><br>
而我们看我们的控制台的输出，很明显能看到我们是在不同的线程中进行数据交换:
<br><br>
![控制台](http://oaldigvho.bkt.clouddn.com/2.1.png)

<br><br>
#### 3.多线程使用- `NSOperation`及`NSOperationQueue`

##### 3.1 `NSInvocationOperation`和`NSBlockOperation`
&nbsp;&nbsp;&nbsp;&nbsp; `NSOperation` 是苹果公司对 `GCD` 的封装，完全面向对象，所以使用起来更好理解。 大家可以看到 `NSOperation` 和 `NSOperationQueue` 分别对应 `GCD` 的任务和队列 。操作步骤也很好理解：

将要执行的任务封装到一个 `NSOperation` 对象中。<br>
将此任务添加到一个 `NSOperationQueue` 对象中。<br>

然后系统就会自动执行任务。

值得注意的是，`NSOperation`是个抽象类无法直接使用，一般我们都会使用它的子类`NSInvocationOperation`和`NSBlockOperation`来创建任务对象，再对其调用`start`方法执行。

	#import "NSThreadViewController.h"
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	// 任务创建，执行 Target 的 selector 方法，并传入 object 参数
    	NSInvocationOperation * invocationOpe = [[NSInvocationOperation alloc] initWithTarget:target selector:@selector(waitFroRun:) object:params];
    	
    	// 启动任务
    	[invocationOpe start];
	}
	@end

但是，大家会发现，这是在当前线程执行的。所以为了并发执行，我们可以使用`NSBlockOperation`来创建和添加多任务，这样多任务就会在主线程和子线程中并发执行。
	
	#import "NSThreadViewController.h"
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	
    	NSBlockOperation * blockOperation = [NSBlockOperation blockOperationWithBlock:^{
        
        	//do something
        
    	}];
    
    	// 添加其它任务进来
    	[blockOperation addExecutionBlock:^{
        
        	// add another block
        
    	}];
    
    	[blockOperation start];
	}
	@end
（注意：`addExecutionBlock`方法必须在`start`方法之前执行，不然会引起崩溃。）
<br>
<br>

当然了，除了上面的两种 `Operation` 以外，我们还可以自定义 `Operation`。自定义 `Operation` 需要继承 `NSOperation` 类，并实现其 `main` 方法，因为在调用 `start` 方法的时候，内部会调用 `main` 方法完成相关逻辑。所以如果以上的两个类无法满足你的欲望的时候，你就需要自定义了。你想要实现什么功能都可以写在里面。除此之外，你还需要实现 `cancel` 在内的各种方法。比较麻烦，如果有需要定制的朋友，可以自行研究一下。

##### 3.2 `NSOperationQueue`
&nbsp;&nbsp;&nbsp;&nbsp; 到这里，我们已经实现了任务的并发，但是如果我还是希望所有的任务都做子线程中进行，丝毫不影响我的主线程，那该怎么做呢？这里，就涉及到了`NSOperationQueue`的使用了。<br>
&nbsp;&nbsp;&nbsp;&nbsp; 在`NSOperationQueue`中，线程只有两种，主线程和其它线程，主线程我们可以通过 `[NSOperationQueue mainQueue]` 获取到，而所有通过创建获得的线程，统统都是子线程。

	#import "NSThreadViewController.h"
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	
    	 NSBlockOperation * blockOperation = [NSBlockOperation blockOperationWithBlock:^{
        
        	//do something
        
    	}];
    
    	// 添加其它任务进来
    	[blockOperation addExecutionBlock:^{
        
        	// add another block
        
    	}];
    
    	NSInvocationOperation * invocationOperation = [[NSInvocationOperation alloc] initWithTarget:target selector:@selector(waitForRun:) object:params];
    	
    	// 创建队列（其它队列），队列中的所以任务都是并发进行 ，如果希望是串行，则将maxConcurrentOperationCount 最大并发数量 设置为1
    	NSOperationQueue * queue = [[NSOperationQueue alloc] init];
    	//        queue.maxConcurrentOperationCount = 1;
    	[queue addOperation:blockOperation];
    	[queue addOperation:invocationOperation];
	}
	@end

而且`NSOperation`有一个十分实用的功能，就是任务之间添加依赖，当然也可以解除依赖。也就是说，如果A任务的进行必须建立在B任务的完成之上的话，我们可以用`addDependency`来将A任务依赖给B任务：<br>

	#import "NSThreadViewController.h"
	
	@implementation NSThreadViewController

	- (void)viewDidLoad {
    	[super viewDidLoad];
    	
    	 NSBlockOperation * blockOperationOne = [NSBlockOperation blockOperationWithBlock:^{
        
        	//do something
        
    	}];
    
    	NSBlockOperation * blockOperationTwo = [NSBlockOperation blockOperationWithBlock:^{
        
        	//do something
        
    	}];
    
    	NSBlockOperation * blockOperationThree = [NSBlockOperation blockOperationWithBlock:^{
        
        	//do something
        
    	}];
    
    	// 添加依赖
    	[blockOperationTwo addDependency:blockOperationOne];
    	[blockOperationThree addDependency:blockOperationTwo];
    
    	// 解除依赖
		//    [blockOperationThree removeDependency:blockOperationTwo];
    
    	NSOperationQueue * queue = [[NSOperationQueue alloc] init];
    	[queue addOperations:@[blockOperationOne,blockOperationTwo,blockOperationThree] waitUntilFinished:NO];
    }
	@end















<br>
<br>
<br>
<br>
如果你想要看到源码，可以到我的github上下载使用：[Demo](https://github.com/zsfbradleyjohnson/Quartz2D)。

***

如果你喜欢我的文章，请不要吝啬你的喜欢和关注，这是我的[简书](http://www.jianshu.com/users/91577acf333a/latest_articles).